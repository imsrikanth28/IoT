
1) SortMapper.java

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import java.io.IOException;
public class SortMapper extends Mapper<LongWritable, Text, IntWritable, IntWritable> {
 private IntWritable number = new IntWritable();
 @Override
 protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
 number.set(Integer.parseInt(value.toString()));
 context.write(number, number);
 }
}


2) SortReducer.java

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Reducer;
import java.io.IOException;
import java.util.TreeSet;
public class SortReducer extends Reducer<IntWritable, IntWritable, IntWritable, IntWritable> {
 private TreeSet<Integer> topNSet = new TreeSet<>();
 private int N = 5; // Change N to the number of top entries you want
 @Override
 protected void reduce(IntWritable key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
 topNSet.add(key.get());
 if (topNSet.size() > N) {
 topNSet.pollFirst(); // Remove the smallest element
 }
 }
 @Override
 protected void cleanup(Context context) throws IOException, InterruptedException {
 for (Integer num : topNSet.descendingSet()) {
 context.write(new IntWritable(num), new IntWritable(num));
 }
 }
}

3) PartialSort.java

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
public class PartialSort {
 public static void main(String[] args) throws Exception {
 Configuration conf = new Configuration();
 Job job = Job.getInstance(conf, "Partial Sort");
 job.setJarByClass(PartialSort.class);
 job.setMapperClass(SortMapper.class);
 job.setReducerClass(SortReducer.class);
 job.setOutputKeyClass(IntWritable.class);
 job.setOutputValueClass(IntWritable.class);
 FileInputFormat.addInputPath(job, new Path(args[0]));
 FileOutputFormat.setOutputPath(job, new Path(args[1]));
 System.exit(job.waitForCompletion(true) ? 0 : 1);
 }
}
 